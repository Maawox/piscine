Coins [1;1] : valeurs possibles
	1;1 = 4;
	2;2 = 1,2,3;
	2;3 = 1,2;
	3;3 = 1,2;
	3;4 = 1;
	4;4 = 1;
      [2;2] :
	1;1 = 1,2,3;
	1;2 = 1,2,3;
	1;3 = 


while (y >= 0)
	{	
		if (1)
		{
			printf("x = %d\n", x);
			map[y][x] = v;//ft_check(user_input[x], user_input[x + base], user_input[y + base*2], user_input[y + base * 3]);
			v--;
			printf("y = %d\n", y);
			printf("map = %d\n", map[y][x]);
			if (x >= 1)
			{
				//v = base;
				x--;
			}	
			else if (x <= 1 && y >= 0)
			{
				//v = base;
				x = base - 1;
				y--;
			}
			if (v == 0)
			{
				v = base;
			}
		}
		else
		{
			if (v > 1)
				v--;
			else
				x++;
		}

	}	
	/*if (v > 0 && ft_check(v, user_input))
	{
		map[x][y] = v;
		ft_BRUTE_BABY(map[x + 1][y], user_input, base, v - 1);
	}	
	else if (v < 0)
		v = 4;
		ft_BRUTE_BABY(map[x + 1][y], user_input, base, v);
	else if (x >= 0 && v == 0)
		v = 4;
														// on check la valeur de x (ligne)
	if (x == 0) 										// si x = 0, si on est au debut de la ligne			
	{															
		x = 3;											// on reinitialise sa valeur, on repart a la fin 			
		ft_BRUTE_BABY(map[x][y - 1], user_input, base, v);	// et on remonte d'une ligne
	}
	else if (x > 0)										// si on est pas encore au debut de la ligne
	{
		ft_BRUTE_BABY(map[x - 1][y], user_input, base, v);	// on recule jusqu'au
	}*/


int ft_check(int y, int x, int **map, int *user_input, int base, int v, int phc, int nbc)

/*int *ft_input(int *user_input, int base, int multiplicateur)
{
	int i;
	int j;
	int *tab;

	tab = ((int*)malloc(sizeof(int) * base));
	j = 0;
	i = base*multiplicateur;
	while (i < base - 1)
		{
			printf("6\n");
			tab[j] = user_input[i];
			printf("%d\n", tab[j]);
			j++;
			i++;

		}
	return(tab);
}*/


/*void ft_split_user_input(int *user_input, int *up, int *down, int *left, int *right, int base)
{
	int uu;
	int ud;
	int ul;
	int ur;
	printf("5\n");
	
	uu = 0;
	ud = 0;
	ul = 0;
	ur = 0;
	up = ft_input(user_input, base, 0);
	down = ft_input(user_input, base, 1);
	left = ft_input(user_input,  base, 2);
	right = ft_input(user_input, base, 3);

}*/

/*int find_user_input(x, y, *user_input, )
{
	if (y == 3)
	{

	}
	else if (y == 2)
	{
		
	}
	else if (y == 1)
	{
		
	}
	else if (y == 0)
    {    	
    	    }
}*/

int ft_BIG_BRUTE_BABY(int y, int x, int **map, int *user_input, int base, int v)
{

	ft_check()
	
		return (0);
}

if (check_line_column(v, **map, x, y))
	{
	       map[y][x] = v;
	       *map -= 1;
	       ft_check(map, user_input, v);
	}
	return (v);